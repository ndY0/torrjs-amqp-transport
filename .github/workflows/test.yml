# This is a basic workflow to help you get started with Actions

name: test_coverage

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches-ignore: []
  pull_request:
    branches-ignore: []

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: node:15
    # Service containers to run with `test`
    services:
      # Label used to access the service container
      rabbitmq:
        # Docker Hub image
        image: rabbitmq
        ports:
          - 5672:5672
        options: '--health-cmd "rabbitmqctl status" --health-interval 10s --health-timeout 10s --health-retries 6 --health-start-period 60s'
        # Set health checks to wait until redis has started

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.yarn
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Run test
        run: yarn test
        env:
          # The hostname used to communicate with the Redis service container
          RABBITMQ_HOSTNAME: rabbitmq
          # The default Redis port
          RABBITMQ_PORT: 5672
